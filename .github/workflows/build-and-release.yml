name: Build and Release

on:
  push:
  pull_request:
  release:
    types: [ published ]

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: 24
        distribution: 'temurin'
        
    - name: Verify Java version
      run: |
        java -version
        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
        if [ "$JAVA_VERSION" -lt 24 ]; then
          echo "⚠️  WARNING: Using Java $JAVA_VERSION. This project requires Java 24+ for optimal performance."
          echo "⚠️  Some features may not work correctly with older Java versions."
        else
          echo "✅ Using Java $JAVA_VERSION (latest stable)"
        fi
      shell: bash
      
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: 24
        distribution: graalvm
        components: native-image
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      if: matrix.os != 'windows-latest'
      run: chmod +x ./gradlew
      
    - name: Build all modules
      run: ./gradlew build
      shell: bash
      
    - name: Generate module dependencies
      run: ./gradlew detectModuleDependencies
      shell: bash
      
    - name: Build native images (CLI and Service)
      run: ./gradlew :cli:nativeCompile :service:nativeCompile
      shell: bash
      continue-on-error: true
      
    - name: Create jlink images
      run: ./gradlew createAllJlinkImages
      shell: bash
      
    - name: Package all applications
      run: ./gradlew packageAll
      shell: bash
      
    - name: Generate distribution report
      run: ./gradlew distributionReport
      shell: bash
      
    - name: Generate module analysis report
      run: ./gradlew moduleAnalysisReport
      shell: bash
      
    - name: Upload CLI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cli-artifacts-${{ matrix.os }}
        path: |
          cli/build/jpackage/
          cli/build/native/nativeCompile/
          cli/build/jlink/
        retention-days: 30
        
    - name: Upload Desktop artifacts
      uses: actions/upload-artifact@v4
      with:
        name: desktop-artifacts-${{ matrix.os }}
        path: |
          desktop/build/jpackage/
          desktop/build/jlink/
        retention-days: 30
        
    - name: Upload Service artifacts
      uses: actions/upload-artifact@v4
      with:
        name: service-artifacts-${{ matrix.os }}
        path: |
          service/build/jpackage/
          service/build/native/nativeCompile/
          service/build/jlink/
        retention-days: 30
        
    - name: Upload Service-Desktop artifacts
      uses: actions/upload-artifact@v4
      with:
        name: service-desktop-artifacts-${{ matrix.os }}
        path: |
          service-desktop/build/jpackage/
          service-desktop/build/jlink/
        retention-days: 30
        
    - name: Upload Reports
      uses: actions/upload-artifact@v4
      with:
        name: reports-${{ matrix.os }}
        path: |
          build/distribution-report.md
          build/module-analysis-report.md
        retention-days: 30

  create-release-assets:
    if: github.event_name == 'release'
    needs: build-and-package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Create platform-specific bundles
        for os in macos-latest windows-latest ubuntu-latest; do
          mkdir -p "release-assets/$os"
          
          # Copy CLI artifacts
          if [ -d "artifacts/cli-artifacts-$os" ]; then
            cp -r "artifacts/cli-artifacts-$os"/* "release-assets/$os/cli/" 2>/dev/null || true
          fi
          
          # Copy Desktop artifacts
          if [ -d "artifacts/desktop-artifacts-$os" ]; then
            cp -r "artifacts/desktop-artifacts-$os"/* "release-assets/$os/desktop/" 2>/dev/null || true
          fi
          
          # Copy Service artifacts
          if [ -d "artifacts/service-artifacts-$os" ]; then
            cp -r "artifacts/service-artifacts-$os"/* "release-assets/$os/service/" 2>/dev/null || true
          fi
          
          # Copy Service-Desktop artifacts
          if [ -d "artifacts/service-desktop-artifacts-$os" ]; then
            cp -r "artifacts/service-desktop-artifacts-$os"/* "release-assets/$os/service-desktop/" 2>/dev/null || true
          fi
          
          # Copy reports
          if [ -d "artifacts/reports-$os" ]; then
            cp -r "artifacts/reports-$os"/* "release-assets/$os/" 2>/dev/null || true
          fi
        done
        
        # Create cross-platform bundles
        mkdir -p release-assets/cross-platform
        
        # Copy all reports
        find artifacts/reports-* -name "*.md" -exec cp {} release-assets/cross-platform/ \;
        
        # Create installation instructions
        cat > release-assets/cross-platform/INSTALL.md << 'EOF'
        # System Test Suite - Installation Guide
        
        ## Available Applications
        
        ### CLI Application
        - **macOS**: Download `cli-artifacts-macos-latest` and run the `.app` or native executable
        - **Windows**: Download `cli-artifacts-windows-latest` and run the `.exe` or `.msi` installer
        - **Linux**: Download `cli-artifacts-ubuntu-latest` and run the `.deb` package or native executable
        
        ### Desktop Application
        - **macOS**: Download `desktop-artifacts-macos-latest` and run the `.app` or `.dmg` installer
        - **Windows**: Download `desktop-artifacts-windows-latest` and run the `.exe` or `.msi` installer
        - **Linux**: Download `desktop-artifacts-ubuntu-latest` and run the `.deb` package
        
        ### Service Application
        - **macOS**: Download `service-artifacts-macos-latest` and run the `.app` or native executable
        - **Windows**: Download `service-artifacts-windows-latest` and run the `.exe` or `.msi` installer
        - **Linux**: Download `service-artifacts-ubuntu-latest` and run the `.deb` package or native executable
        
        ### Service-Desktop Application
        - **macOS**: Download `service-desktop-artifacts-macos-latest` and run the `.app` or `.dmg` installer
        - **Windows**: Download `service-desktop-artifacts-windows-latest` and run the `.exe` or `.msi` installer
        - **Linux**: Download `service-desktop-artifacts-ubuntu-latest` and run the `.deb` package
        
        ## Native Executables
        
        The following applications have native executables available:
        - **CLI**: `system-test-cli` (16MB)
        - **Service**: `system-test-service` (29MB)
        
        These provide faster startup and smaller memory footprint compared to JVM-based distributions.
        
        ## Reports
        
        - `distribution-report.md`: Comprehensive distribution information
        - `module-analysis-report.md`: Module dependency analysis
        
        EOF
        
        # Create archive for each platform
        for os in macos-latest windows-latest ubuntu-latest; do
          if [ -d "release-assets/$os" ]; then
            tar -czf "release-assets/system-test-suite-$os.tar.gz" -C "release-assets/$os" .
          fi
        done
        
        # Create cross-platform archive
        tar -czf "release-assets/system-test-suite-cross-platform.tar.gz" -C "release-assets/cross-platform" .
        
        # List all created assets
        find release-assets -type f -name "*.tar.gz" -o -name "*.md" | sort
        
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: release-assets/
        retention-days: 90

  attach-to-release:
    if: github.event_name == 'release'
    needs: create-release-assets
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: ./release-assets
        
    - name: Attach assets to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/system-test-suite-macos-latest.tar.gz
          release-assets/system-test-suite-windows-latest.tar.gz
          release-assets/system-test-suite-ubuntu-latest.tar.gz
          release-assets/system-test-suite-cross-platform.tar.gz
        body: |
          # System Test Suite Release
          
          ## Downloads
          
          ### Platform-Specific Bundles
          - **macOS**: `system-test-suite-macos-latest.tar.gz`
          - **Windows**: `system-test-suite-windows-latest.tar.gz`
          - **Linux**: `system-test-suite-ubuntu-latest.tar.gz`
          
          ### Cross-Platform Bundle
          - **All Platforms**: `system-test-suite-cross-platform.tar.gz` (includes documentation and reports)
          
          ## Applications Included
          
          - **CLI**: Command-line interface with native executable support
          - **Desktop**: Swing-based GUI application
          - **Service**: Web service with HTML interface
          - **Service-Desktop**: Web service with automatic browser opening
          
          ## Installation
          
          Extract the appropriate archive for your platform and follow the instructions in `INSTALL.md`.
          
          ## Features
          
          - ✅ Cross-platform native installers (DMG, MSI, DEB)
          - ✅ Native executables for CLI and Service (GraalVM)
          - ✅ Custom JVM images (jlink) for reduced size
          - ✅ Java Module System (JPMS) support
          - ✅ Automatic module dependency detection
          
          ## Reports
          
          - `distribution-report.md`: Comprehensive distribution information
          - `module-analysis-report.md`: Module dependency analysis
          
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
