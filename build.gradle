plugins {
    id 'java'
    id 'application'
    id 'jvm-test-suite'
    id 'org.graalvm.buildtools.native' version '0.9.28'
}

group = 'com.example'
version = '1.0.0'

// Configure all subprojects
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.graalvm.buildtools.native'
    
    group = 'com.example'
    version = '1.0.0'
    
    java {
        sourceCompatibility = JavaVersion.VERSION_24
        targetCompatibility = JavaVersion.VERSION_24
        modularity.inferModulePath = true
    }
    
    // Enable preview features for latest Java features
    compileJava {
        options.compilerArgs += ['--enable-preview']
    }
    
    test {
        jvmArgs += ['--enable-preview']
    }
    
    repositories {
        mavenCentral()
    }
    
    // GraalVM native image configuration
    graalvmNative {
        binaries {
            main {
                imageName = project.name
                mainClass = project.hasProperty('mainClass') ? project.mainClass : 'com.example.${project.name}.Main'
                buildArgs.addAll([
                    '--no-fallback',
                    '--enable-preview',
                    '--initialize-at-build-time=com.example',
                    '--report-unsupported-elements-at-runtime'
                ])
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Root project dependencies
}

application {
    mainClass = 'com.example.HelloWorldApp'
}

// Ensure proper encoding
compileJava {
    options.encoding = 'UTF-8'
}

// JVM arguments for macOS
run {
    jvmArgs = [
        '-Dapple.laf.useScreenMenuBar=true',
        '-Dcom.apple.macos.useScreenMenuBar=true',
        '-Dcom.apple.mrj.application.apple.menu.about.name=HelloWorldApp'
    ]
}

// Create a runnable JAR
jar {
    manifest {
        attributes(
            'Main-Class': 'com.example.HelloWorldApp'
        )
    }
}

// jpackage configuration for native installers
application {
    mainClass = 'com.example.HelloWorldApp'
    applicationName = 'SystemTest'
    applicationDefaultJvmArgs = [
        '-Dapple.laf.useScreenMenuBar=true',
        '-Dcom.apple.macos.useScreenMenuBar=true',
        '-Dcom.apple.mrj.application.apple.menu.about.name=System Test'
    ]
}

// jpackage tasks for different platforms
tasks.register('packageMac', Exec) {
    group = 'distribution'
    description = 'Create macOS .dmg installer'
    dependsOn 'jar'
    
    commandLine 'jpackage', 
        '--input', 'build/libs',
        '--main-jar', 'hello-world-swing-1.0.0.jar',
        '--main-class', 'com.example.HelloWorldApp',
        '--name', 'System Test',
        '--app-version', '1.0.0',
        '--vendor', 'Example Corp',
        '--description', 'Java Swing System Test Application',
        '--type', 'dmg',
        '--dest', 'build/distributions',
        '--java-options', '--enable-preview',
        '--java-options', '-Dapple.laf.useScreenMenuBar=true',
        '--java-options', '-Dcom.apple.macos.useScreenMenuBar=true',
        '--java-options', '-Dcom.apple.mrj.application.apple.menu.about.name=System Test'
}

tasks.register('packageWindows', Exec) {
    group = 'distribution'
    description = 'Create Windows .msi installer'
    dependsOn 'jar'
    
    commandLine 'jpackage',
        '--input', 'build/libs',
        '--main-jar', 'hello-world-swing-1.0.0.jar',
        '--main-class', 'com.example.HelloWorldApp',
        '--name', 'System Test',
        '--app-version', '1.0.0',
        '--vendor', 'Example Corp',
        '--description', 'Java Swing System Test Application',
        '--type', 'msi',
        '--dest', 'build/distributions',
        '--java-options', '--enable-preview',
        '--win-console',
        '--win-dir-chooser',
        '--win-menu',
        '--win-shortcut'
}

tasks.register('packageLinux', Exec) {
    group = 'distribution'
    description = 'Create Linux .deb and .rpm packages'
    dependsOn 'jar'
    
    commandLine 'jpackage',
        '--input', 'build/libs',
        '--main-jar', 'hello-world-swing-1.0.0.jar',
        '--main-class', 'com.example.HelloWorldApp',
        '--name', 'System Test',
        '--app-version', '1.0.0',
        '--vendor', 'Example Corp',
        '--description', 'Java Swing System Test Application',
        '--type', 'deb',
        '--dest', 'build/distributions',
        '--java-options', '--enable-preview',
        '--linux-menu-group', 'Development',
        '--linux-shortcut'
}

// Create fat JAR with all dependencies
tasks.register('fatJar', Jar) {
    group = 'distribution'
    description = 'Create fat JAR with all dependencies'
    dependsOn 'jar'
    
    archiveBaseName = 'system-test-fat'
    archiveVersion = '1.0.0'
    archiveClassifier = 'all'
    
    from sourceSets.main.output
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    
    manifest {
        attributes(
            'Main-Class': 'com.example.HelloWorldApp',
            'Implementation-Title': 'System Test Application',
            'Implementation-Version': '1.0.0',
            'Implementation-Vendor': 'Example Corp'
        )
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Create distribution ZIP
tasks.register('createDistZip', Zip) {
    group = 'distribution'
    description = 'Create distribution ZIP'
    dependsOn 'fatJar'
    
    from 'build/libs/system-test-fat-1.0.0-all.jar'
    from 'README.md'
    from 'LICENSE'
    
    archiveFileName = 'system-test-1.0.0.zip'
    destinationDirectory = file('build/distributions')
}

// Comprehensive distribution tasks
tasks.register('buildAll') {
    group = 'build'
    description = 'Build all modules'
    dependsOn ':shared:build', ':cli:build', ':desktop:build', ':service:build'
}

tasks.register('createAllNativeImages') {
    group = 'distribution'
    description = 'Create native images for all modules'
    dependsOn ':cli:createNativeImage', ':desktop:createNativeImage', ':service:createNativeImage'
}

tasks.register('createAllJlinkImages') {
    group = 'distribution'
    description = 'Create jlink images for all modules'
    dependsOn ':cli:createJlinkImage', ':desktop:createJlinkImage', ':service:createJlinkImage'
}

tasks.register('packageAll') {
    group = 'distribution'
    description = 'Create packages for all platforms and modules'
    dependsOn 'packageMac', 'packageWindows', 'packageLinux', 'createDistZip'
}

// Module-specific packaging tasks
tasks.register('packageCli') {
    group = 'distribution'
    description = 'Package CLI module for all platforms'
    dependsOn ':cli:createNativeImage', ':cli:createJlinkImage'
}

tasks.register('packageDesktop') {
    group = 'distribution'
    description = 'Package Desktop module for all platforms'
    dependsOn ':desktop:packageDesktopMac', ':desktop:packageDesktopWindows', ':desktop:packageDesktopLinux'
}

tasks.register('packageService') {
    group = 'distribution'
    description = 'Package Service module for all platforms'
    dependsOn ':service:packageServiceMac', ':service:packageServiceWindows', ':service:packageServiceLinux', ':service:createNativeImage', ':service:createJlinkImage'
}

// Auto-detect module dependencies task
tasks.register('detectModuleDependencies') {
    group = 'build'
    description = 'Detect and update module dependencies automatically'
    
    doLast {
        subprojects.each { project ->
            if (project.plugins.hasPlugin('java')) {
                println "Analyzing dependencies for ${project.name}..."
                
                def dependencies = project.configurations.implementation.dependencies
                def requires = dependencies.collect { dep ->
                    if (dep instanceof ProjectDependency) {
                        return "com.example.${dep.dependencyProject.name}"
                    } else if (dep.group && dep.name) {
                        return "${dep.group}.${dep.name}".replace('-', '.')
                    }
                    return null
                }.findAll { it != null }
                
                println "  Dependencies: ${requires.join(', ')}"
                
                // Update module-info.java if needed
                def moduleInfoFile = project.file('src/main/java/module-info.java')
                if (moduleInfoFile.exists()) {
                    println "  Module-info.java exists for ${project.name}"
                } else {
                    println "  No module-info.java found for ${project.name}"
                }
            }
        }
    }
}

// Custom task to generate distribution report
tasks.register('distributionReport') {
    group = 'distribution'
    description = 'Generate comprehensive distribution report'
    
    doLast {
        def reportFile = file("$buildDir/distribution-report.md")
        reportFile.parentFile.mkdirs()
        
        def report = """# System Test Suite - Distribution Report

## Modules
- **shared**: Common utilities and UI components
- **cli**: Command-line interface
- **desktop**: Desktop GUI application  
- **service**: Web service API

## Distribution Formats

### Native Images (GraalVM)
- Ultra-fast startup times
- No JVM required
- Platform-specific binaries
- Smaller memory footprint

### JLink Images
- Custom JVM with only required modules
- Reduced size compared to full JDK
- Platform-specific

### jpackage Installers
- Native installers (.dmg, .msi, .deb)
- Embedded JVM
- System integration

### Fat JARs
- Single executable JAR
- Requires Java installation
- Cross-platform

## Build Commands

```bash
# Build all modules
./gradlew buildAll

# Create native images
./gradlew createAllNativeImages

# Create jlink images  
./gradlew createAllJlinkImages

# Package everything
./gradlew packageAll

# Module-specific packaging
./gradlew packageCli
./gradlew packageDesktop
./gradlew packageService
```

## Generated Artifacts

### CLI Module
- `system-test-cli` (native image)
- `cli/build/jlink/` (jlink image)
- Fat JAR with dependencies

### Desktop Module  
- `System Test Desktop-1.0.0.dmg` (macOS)
- `System Test Desktop-1.0.0.msi` (Windows)
- `system-test-desktop` (native image)
- `desktop/build/jlink/` (jlink image)

### Service Module
- `system-test-service` (native image)
- `service/build/jlink/` (jlink image)
- Fat JAR with dependencies

Generated on: ${new Date()}
"""
        
        reportFile.text = report
        println "Distribution report generated: ${reportFile}"
    }
}
